     1                                  ; Write a program in assembly language which computes one of the following arithmetic expressions, considering the following domains for the variables: 
     2                                  ; a - doubleword; b, d - byte; c - word; e - qword
     3                                  ; a + b / c - d * 2 - e
     4                                  bits 32 ;assembling for the 32 bits architecture
     5                                  ; the start label will be the entry point in the program
     6                                  global  start 
     7                                  
     8                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     9                                  
    10                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    11                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    12                                  segment  data use32 class=data ; the data segment where the variables are declared 
    13 00000000 7D000000                	a dd 125
    14 00000004 02                      	b db 2
    15 00000005 0F00                    	c dw 15
    16 00000007 C8                      	d db 200
    17 00000008 5000000000000000        	e dq 80
    18                                  segment  code use32 class=code ; code segment
    19                                  start: 
    20                                  	;for computing b/c, we convert b from byte to doubleword, so that we can divide it by the word c
    21 00000000 A0[04000000]            	mov al, [b]
    22 00000005 B400                    	mov ah, 0 ;unsigned conversion from al to ax
    23 00000007 66BA0000                	mov dx, 0 ;unsigned conversion from ax to dx:ax
    24                                  	;dx:ax = b
    25 0000000B 66F735[05000000]        	div word [c] ;unsigned division dx:ax by c
    26                                  	;ax=b/c	
    27                                  	;catul impartirii este in ax (restul este in dx, dar mergem mai departe doar cu catul)
    28                                  
    29 00000012 6689C3                  	mov bx, ax ;we save b/c in bx so that we can use ax for multiplying d by 2
    30 00000015 B002                    	mov al, 2
    31 00000017 F625[07000000]          	mul byte [d] ;ax=d*2
    32                                  
    33 0000001D 6629C3                  	sub bx, ax ;bx = b / c - d * 2
    34                                  	; we convert the word bx to doubleword so that we can add it with the doubleword a
    35 00000020 66B90000                	mov cx, 0 ; unsigned conversion from bx to cx:bx
    36                                  	;cx:bx=b/c-d*2
    37                                  
    38 00000024 66A1[00000000]          	mov ax, word [a]
    39 0000002A 668B15[02000000]        	mov dx, word [a+2] ;dx:ax=a
    40                                  
    41 00000031 6601D8                  	add ax, bx
    42 00000034 6611CA                  	adc dx, cx ;dx:ax = a + b / c - d * 2
    43                                  	
    44 00000037 6652                    	push dx
    45 00000039 6650                    	push ax
    46 0000003B 58                      	pop eax ;eax = a + b / c - d * 2
    47                                  	
    48 0000003C BA00000000              	mov edx, 0 ;edx:eax = a + b / c - d * 2
    49 00000041 2B05[08000000]          	sub eax, dword [e]
    50 00000047 1B15[0C000000]          	sbb edx, dword [e+4] ;edx:eax = a + b / c - d * 2 - e
    51                                  	
    52 0000004D 6A00                    	push   dword 0 ;saves on stack the parameter of the function exit
    53 0000004F FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution of the program
